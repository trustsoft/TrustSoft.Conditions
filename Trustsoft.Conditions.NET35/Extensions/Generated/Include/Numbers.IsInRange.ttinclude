<#+ 
  void Numbers_IsInRange_Render(string targetType)
  {
       this.PushIndent("    ");
       this.PushIndent("    ");
#>
#region " IsInRange "

/// <summary>
///     Checks whether the given value is between <paramref name="minValue"/> and
///     <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
/// </summary>
/// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
/// <param name="minValue"> The lowest valid value. </param>
/// <param name="maxValue"> The highest valid value. </param>
/// <param name="conditionDescription"> The description of the condition that should hold. </param>
/// <returns> The specified <paramref name="validator"/> instance. </returns>
/// <exception cref="ArgumentOutOfRangeException">
///     Thrown when the value of the specified <paramref name="validator"/> is not in the specified range.
/// </exception>
public static IArgumentValidator<<#= targetType #>> IsInRange(this IArgumentValidator<<#= targetType #>> validator,
                                                <#=targetType#> minValue,
                                                <#= targetType #> maxValue,
                                                string conditionDescription = null)
{
    <#= targetType #> value = validator.Argument.Value;

    if (!(value >= minValue && value <= maxValue))
    {
        string msg = MessageBuilder.Combine(validator.Argument,
                                            conditionDescription,
                                            StringRes.ValueShouldBeBetweenXAndY,
                                            true,
                                            minValue,
                                            maxValue);
        validator.ErrorHandler.Post(ViolationType.OutOfRange, msg);
    }

    return validator;
}

#endregion
<#+
      this.PopIndent();
      this.PopIndent();
  }
#>