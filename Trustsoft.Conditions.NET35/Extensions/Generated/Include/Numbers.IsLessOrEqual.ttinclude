<#+ 
  void Numbers_IsLessOrEqual_Render(string targetType)
  {
#>
#region " IsLessOrEqual "

        /// <summary>
        ///     Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="maxValue"> The highest valid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsLessOrEqual(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                            <#= this.TargetType #> maxValue,
                                                            string conditionDescription = null)
        {
            if (!(validator.Argument.Value <= maxValue))
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeSmallerThanOrEqualToX,
                                                    true,
                                                    maxValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="minValue"> The highest invalid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is smaller or equal to
        ///     <paramref name="minValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotLessOrEqual(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                               <#= this.TargetType #> minValue,
                                                               string conditionDescription = null)
        {
            if (validator.Argument.Value <= minValue)
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldNotBeSmallerThanOrEqualToX,
                                                    true,
                                                    minValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        #endregion
<#+
  }
#>