<#
//  -------------------------------------------------------------------------------------------------------
//  Template: Generates C# code for extension methods for IArgumentValidator<numeric type>
//  Author: Sukhanov Maxim (sukhanov.maxim@hotmail.com)
//  Links: 
//          MSDN about developing T4 files: http://msdn.microsoft.com/en-us/library/bb126445.aspx
//                                          http://msdn.microsoft.com/en-us/library/dd820620.aspx 
//  -------------------------------------------------------------------------------------------------------
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var namespaceName = "Trustsoft.Conditions";
	IServiceProvider serviceProvider = (IServiceProvider)this.Host;
	EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
	if (dte == null)
		throw new Exception("T4 can only execute through the Visual Studio host");
#>
// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     Runtime Version: <#= System.Environment.Version #>
//     This code was generated by a T4 Template at <#= DateTime.Now.ToString("dd-MM-yyyy, HH:mm:ss") #>.
//	   
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------

namespace <#= namespaceName #>
{
    #region " Using Directives "

    using System;

    using Trustsoft.Conditions.Internals;

    #endregion

    public static partial class ValidatorExtensions
    {
        /// <summary>
        ///     Checks whether the given value is less than zero.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is greater or equal to zero.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNegative(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                         string conditionDescription = null)
        {
            return validator.IsLessThan(0, conditionDescription);
        }

        /// <summary>
        ///     Checks whether the given value is not less than zero or equal to zero.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is smaller or equal to zero.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotNegative(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                            string conditionDescription = null)
        {
            return validator.IsNotLessThan(0, conditionDescription);
        }

        /// <summary>
        ///     Checks whether the given value is greater than zero.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is smaller or equal to zero.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsPositive(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                         string conditionDescription = null)
        {
            return validator.IsGreaterThan(0, conditionDescription);
        }

        /// <summary>
        ///     Checks whether the given value is smaller or equal to zero.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is greater than zero.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotPositive(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                            string conditionDescription = null)
        {
            return validator.IsLessOrEqual(0, conditionDescription);
        }

        /// <summary>
        ///     Checks whether the given value is between <paramref name="minValue"/> and
        ///     <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="minValue"> The lowest valid value. </param>
        /// <param name="maxValue"> The highest valid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is not in the specified range.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsInRange(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                        <#= this.TargetType #> minValue,
                                                        <#= this.TargetType #> maxValue,
                                                        string conditionDescription = null)
        {
            <#= this.TargetType #> value = validator.Argument.Value;

            if (!(value >= minValue && value <= maxValue))
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeBetweenXAndY,
                                                    true,
                                                    minValue,
                                                    maxValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is not between <paramref name="minValue"/> and
        ///     <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="minValue"> The lowest invalid value. </param>
        /// <param name="maxValue"> The highest invalid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is in the specified range.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotInRange(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                           <#= this.TargetType #> minValue,
                                                           <#= this.TargetType #> maxValue,
                                                           string conditionDescription = null)
        {
            <#= this.TargetType #> value = validator.Argument.Value;

            if (value >= minValue && value <= maxValue)
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldNotBeBetweenXAndY,
                                                    true,
                                                    minValue,
                                                    maxValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is greater than the specified <paramref name="minValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="minValue"> The highest invalid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is smaller or equal to
        ///     <paramref name="minValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsGreaterThan(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                            <#= this.TargetType #> minValue,
                                                            string conditionDescription = null)
        {
            if (!(validator.Argument.Value > minValue))
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeGreaterThanX,
                                                    true,
                                                    minValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is not greater than the specified <paramref name="maxValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="maxValue"> The lowest valid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotGreaterThan(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                               <#= this.TargetType #> maxValue,
                                                               string conditionDescription = null)
        {
            if (validator.Argument.Value > maxValue)
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldNotBeGreaterThanX,
                                                    true,
                                                    maxValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="minValue"> The lowest valid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsGreaterOrEqual(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                               <#= this.TargetType #> minValue,
                                                               string conditionDescription = null)
        {
            if (!(validator.Argument.Value >= minValue))
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeGreaterThanOrEqualToX,
                                                    true,
                                                    minValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="maxValue"> The lowest invalid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/>
        ///     is greater or equal to <paramref name="maxValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotGreaterOrEqual(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                                  <#= this.TargetType #> maxValue,
                                                                  string conditionDescription = null)
        {
            if (validator.Argument.Value >= maxValue)
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldNotBeGreaterThanOrEqualToX,
                                                    true,
                                                    maxValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is less than the specified <paramref name="maxValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="maxValue"> The lowest invalid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/>
        ///     is greater or equal to <paramref name="maxValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsLessThan(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                         <#= this.TargetType #> maxValue,
                                                         string conditionDescription = null)
        {
            if (!(validator.Argument.Value < maxValue))
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeSmallerThanX,
                                                    true,
                                                    maxValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is not less than the specified <paramref name="minValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="minValue"> The lowest valid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotLessThan(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                            <#= this.TargetType #> minValue,
                                                            string conditionDescription = null)
        {
            if (validator.Argument.Value < minValue)
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldNotBeSmallerThanX,
                                                    true,
                                                    minValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="maxValue"> The highest valid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsLessOrEqual(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                            <#= this.TargetType #> maxValue,
                                                            string conditionDescription = null)
        {
            if (!(validator.Argument.Value <= maxValue))
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeSmallerThanOrEqualToX,
                                                    true,
                                                    maxValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="minValue"> The highest invalid value. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is smaller or equal to
        ///     <paramref name="minValue"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotLessOrEqual(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                               <#= this.TargetType #> minValue,
                                                               string conditionDescription = null)
        {
            if (validator.Argument.Value <= minValue)
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldNotBeSmallerThanOrEqualToX,
                                                    true,
                                                    minValue);
                validator.ErrorHandler.Post(ViolationType.OutOfRangeViolation, msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is equal to the specified <paramref name="value"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="value"> The valid value to compare with. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsEqualTo(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                        <#= this.TargetType #> value,
                                                        string conditionDescription = null)
        {
            // ReSharper disable CompareOfFloatsByEqualityOperator
            if (validator.Argument.Value != value)
            // ReSharper restore CompareOfFloatsByEqualityOperator
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeEqualToX,
                                                    true,
                                                    value);
                validator.ErrorHandler.Post(msg);
            }

            return validator;
        }

        /// <summary>
        ///     Checks whether the given value is unequal to the specified <paramref name="value"/>.
        ///     An exception is thrown otherwise.
        /// </summary>
        /// <param name="validator"> The <see cref="IArgumentValidator{T}"/> that holds the value that has to be checked. </param>
        /// <param name="value"> The invalid value to compare with. </param>
        /// <param name="conditionDescription"> The description of the condition that should hold. </param>
        /// <returns> The specified <paramref name="validator"/> instance. </returns>
        /// <exception cref="ArgumentException">
        ///     Thrown when the value of the specified <paramref name="validator"/> is equal to <paramref name="value"/>.
        /// </exception>
        public static IArgumentValidator<<#= this.TargetType #>> IsNotEqualTo(this IArgumentValidator<<#= this.TargetType #>> validator,
                                                           <#= this.TargetType #> value,
                                                           string conditionDescription = null)
        {
            // ReSharper disable CompareOfFloatsByEqualityOperator
            if (validator.Argument.Value == value)
            // ReSharper restore CompareOfFloatsByEqualityOperator
            {
                string msg = MessageBuilder.Combine(validator,
                                                    conditionDescription,
                                                    StringRes.ValueShouldBeUnequalToX,
                                                    true,
                                                    value);
                validator.ErrorHandler.Post(msg);
            }

            return validator;
        }
    }
}
<#+
  string TargetType = "double";
#>