<#+ 
  void Numbers_IsNotLessThan_Render(string targetType)
  {
       this.PushIndent("    ");
       this.PushIndent("    ");
#>
#region " IsNotLessThan "

[TestMethod]
[TestCategory("<#= targetType #> - IsNotLessThan")]
[Description("Calling IsNotLessThan on lower value should pass.")]
public void IsNotLessThan_ShouldPass_OnLowerValue()
{
    <#= targetType #> val = 7;
    <#= targetType #> min = 5;
    Requires.That(val).IsNotLessThan(min);
    Requires.That(val, "val").IsNotLessThan(min);
}

[TestMethod]
[TestCategory("<#= targetType #> - IsNotLessThan")]
[Description("Calling IsNotLessThan on same value should pass.")]
public void IsNotLessThan_ShouldPass_OnSameValue()
{
    <#= targetType #> val = 7;
    <#= targetType #> min = 7;
    Requires.That(val).IsNotLessThan(min);
    Requires.That(val, "val").IsNotLessThan(min);
}

[TestMethod]
[TestCategory("<#= targetType #> - IsNotLessThan")]
[ExpectedException(typeof(ArgumentOutOfRangeException))]
[Description("Calling IsNotLessThan on higher value should fail.")]
public void IsNotLessThan_ShouldFail_OnHigherValue()
{
    <#= targetType #> val = 4;
    <#= targetType #> min = 8;
    Requires.That(val).IsNotLessThan(min);
}

#endregion
<#+
      this.PopIndent();
      this.PopIndent();
  }
#>