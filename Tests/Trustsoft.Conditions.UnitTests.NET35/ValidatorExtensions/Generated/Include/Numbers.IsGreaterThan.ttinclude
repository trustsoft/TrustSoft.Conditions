<#+ 
  void Numbers_IsGreaterThan_Render(string targetType)
  {
#>
#region " IsGreaterThan "

        [TestMethod]
        [TestCategory("<#= targetType #> - IsGreaterThan")]
        [Description("Calling IsGreaterThan on lower value should pass.")]
        public void IsGreaterThan_ShouldPassOnLowerValue1()
        {
            <#= targetType #> val = 3;
            <#= targetType #> min = 1;
            Requires.That(val).IsGreaterThan(min);
            Requires.That(val, "val").IsGreaterThan(min);
        }

        [TestMethod]
        [TestCategory("<#= targetType #> - IsGreaterThan")]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        [Description("Calling IsGreaterThan on higher value should fail.")]
        public void IsGreaterThan_ShouldFailOnHigherValue1()
        {
            <#= targetType #> val = 7;
            <#= targetType #> min = 10;
            Requires.That(val).IsGreaterThan(min);
        }

        [TestMethod]
        [TestCategory("<#= targetType #> - IsGreaterThan")]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        [Description("Calling IsGreaterThan on same value should fail.")]
        public void IsGreaterThan_ShouldFailOnSameValue1()
        {
            <#= targetType #> val = 7;
            <#= targetType #> min = 7;
            Requires.That(val).IsGreaterThan(min);
        }

        #endregion
<#+
  }
#>