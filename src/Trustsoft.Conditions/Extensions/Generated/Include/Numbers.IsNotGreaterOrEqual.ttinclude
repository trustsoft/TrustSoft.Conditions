<#+
    void Numbers_IsNotGreaterOrEqual_Render(string targetType)
    {
#>
#region " IsNotGreaterOrEqual "

/// <summary>
///   Checks whether the given argument value is not greater or equal to the specified <paramref name="maxValue" />.
/// </summary>
/// <param name="validator"> The <see cref="IArgumentValidator{T}" /> that holds the value to be checked. </param>
/// <param name="maxValue"> The lowest invalid value. </param>
/// <param name="conditionDescription"> The description of the condition that should hold. </param>
/// <returns> The specified <paramref name="validator" /> instance. </returns>
/// <exception cref="ArgumentOutOfRangeException">
///   Throws or collects the error when the value of the specified
///   <paramref name="validator" /> is greater or equal to the specified <paramref name="maxValue" />.
/// </exception>
public static IArgumentValidator<<#= targetType #>> IsNotGreaterOrEqual(this IArgumentValidator<<#= targetType #>> validator,
<#+
        // align the rest of arguments
        var left = targetType.Length + 55;
        var indent = new string(' ', left);
        this.WriteLine($"{indent}{targetType} maxValue,");
        this.WriteLine($"{indent}string? conditionDescription = null)");
#>
{
    if (validator.Argument.Value >= maxValue)
    {
        var msg = MessageBuilder.Combine(validator.Argument,
                                         conditionDescription,
                                         StringRes.ValueShouldNotBeGreaterThanOrEqualToX,
                                         true,
                                         maxValue);

        validator.ErrorHandler.Post(ViolationType.OutOfRange, msg);
    }

    return validator;
}

#endregion
<#+
  }
#>