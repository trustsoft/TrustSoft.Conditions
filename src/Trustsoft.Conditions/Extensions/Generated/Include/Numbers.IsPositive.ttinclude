<#+
    void Numbers_IsPositive_Render(string targetType)
    {
#>
#region " IsPositive "

/// <summary>
///   Checks whether the given argument value is a positive number (greater than zero).
/// </summary>
/// <param name="validator"> The <see cref="IArgumentValidator{T}" /> that holds the value to be checked. </param>
/// <param name="conditionDescription"> The description of the condition that should hold. </param>
/// <returns> The specified <paramref name="validator" /> instance. </returns>
/// <exception cref="ArgumentOutOfRangeException">
///   Throws or collects the error when the value of the specified
///   <paramref name="validator" /> is not a positive number (smaller or equal to zero).
/// </exception>
public static IArgumentValidator<<#= targetType #>> IsPositive(this IArgumentValidator<<#= targetType #>> validator,
<#+
        // align the rest of arguments
        var left = targetType.Length + 46;
        var indent = new string(' ', left);
        this.WriteLine($"{indent}string? conditionDescription = null)");
#>
{
    return validator.IsGreaterThan(0, conditionDescription);
}

#endregion
<#+
    }
#>