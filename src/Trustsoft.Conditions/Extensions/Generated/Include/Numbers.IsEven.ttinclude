<#+ 
    void Numbers_IsEven_Render(string targetType)
    {
#>
#region " IsEven "

/// <summary>
///   Checks whether the given argument value is an even number.
/// </summary>
/// <param name="validator"> The <see cref="IArgumentValidator{T}" /> that holds the value to be checked. </param>
/// <param name="conditionDescription"> The description of the condition that should hold. </param>
/// <returns> The specified <paramref name="validator" /> instance. </returns>
/// <exception cref="ArgumentException">
///   Throws or collects the error when the value of the specified
///   <paramref name="validator" /> is not an even number.
/// </exception>
public static IArgumentValidator<<#= targetType #>> IsEven(this IArgumentValidator<<#= targetType #>> validator,
<#+
    // align the rest of arguments
    var left = targetType.Length + 42;
    var indent = new string(' ', left);
    this.WriteLine($"{indent}string? conditionDescription = null)");
#>
{
    if ((validator.Argument.Value & 1) != 0)
    {
        var msg = MessageBuilder.Combine(validator.Argument,
                                         conditionDescription,
                                         StringRes.ValueShouldBeAnEvenNumber,
                                         true);

        validator.ErrorHandler.Post(msg);
    }

    return validator;
}

#endregion
<#+
    }
#>