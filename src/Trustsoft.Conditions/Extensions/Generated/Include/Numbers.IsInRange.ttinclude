<#+
    void Numbers_IsInRange_Render(string targetType)
    {
#>
#region " IsInRange "

/// <summary>
///   Checks whether the given value is between <paramref name="minValue" /> and
///   <paramref name="maxValue" /> (including those values).
/// </summary>
/// <param name="validator"> The <see cref="IArgumentValidator{T}" /> that holds the value to be checked. </param>
/// <param name="minValue"> The lowest valid value. </param>
/// <param name="maxValue"> The highest valid value. </param>
/// <param name="conditionDescription"> The description of the condition that should hold. </param>
/// <returns> The specified <paramref name="validator" /> instance. </returns>
/// <exception cref="ArgumentOutOfRangeException">
///   Throws or collects the error when the value of the specified
///   <paramref name="validator" /> is not in the specified range.
/// </exception>
public static IArgumentValidator<<#= targetType #>> IsInRange(this IArgumentValidator<<#= targetType #>> validator,
<#+
    var left = targetType.Length + 45; //$"public static IArgumentValidator<{targetType}> IsInRange(".Length;
    this.WriteLine($@"{new string(' ', left)}{targetType} minValue,");
    this.WriteLine($@"{new string(' ', left)}{targetType} maxValue,");
    this.WriteLine($@"{new string(' ', left)}string? conditionDescription = null)");
#>
{
    var value = validator.Argument.Value;

    if (!(value >= minValue && value <= maxValue))
    {
        var msg = MessageBuilder.Combine(validator.Argument,
                                         conditionDescription,
                                         StringRes.ValueShouldBeBetweenXAndY,
                                         true,
                                         minValue,
                                         maxValue);

        validator.ErrorHandler.Post(ViolationType.OutOfRange, msg);
    }

    return validator;
}

#endregion
<#+
    }
#>